[user]
	name = Stephen Skeirik
	email = stephen.skeirik@pi2.network
[alias]
	ci = commit --verbose
	co = checkout
	d = diff --color-moved=blocks
	dc = diff --cached --color-moved=blocks
	st = status -sb
	b = branch
	bb = branch --verbose --verbose
	ba = branch --all
	bba = branch --verbose --verbose --all
	f = fetch
	fa = fetch --all
	g = grep
	last = log -1
	lastchanged = log -1 --pretty= --name-only
	pushf = push --force-with-lease
	smu = submodule update --init --recursive --progress
	hist = log --abbrev-commit --decorate --date=relative --graph --topo-order \
	       --format=format:'%C(bold green)%h%C(reset) - %<(60)%C(green)%s%C(reset) - %C(blue)%an%C(reset)%C(bold yellow)%d%C(reset)'
        l = log --first-parent
	pl = log --pretty='%C(auto)%h %<(10,trunc)%Cred%an%C(auto) %d %s'
	ls = ls-files
	ss = log -1 --stat
	wd = diff --color-words
	wdc = diff --cached --color-words
	md = diff --color-moved --color-moved-ws=ignore-all-space
	mdc = diff --cached --color-moved --color-moved-ws=ignore-all-space
	bs = branch --sort=-committerdate \
	     --format='%(align:25)%(color:green)%(committerdate:relative)%(color:reset)%(end) - %(align:30,left)%(color:yellow)%(refname:short)%(color:reset)%(end) - %(contents:subject)'
	rec  = submodule foreach --recursive
	recg = submodule foreach --recursive git
	unchanged = "!f() { l=$(git ls-files | sort); r=$(git diff --name-only | sort); comm -23 /dev/fd/3 /dev/fd/4 3<<EOF 4<<EOF\n$l\nEOF\n$r\nEOF\n }; f"
	argq = "!f() { [ \"$1\" -ne \"$2\" ] && { printf \"usage $3\\n\"; exit 1; } }; f"
	is-ancestor = "!f() { git argq $# 2 'is-ancestor <rev1> <rev2>'; git merge-base --is-ancestor \"$@\"; }; f"
	related = "!f() { { [ $# -ne 2 ] || l=$(! git rev-to-hash \"$1\") || r=$(! git rev-to-hash \"$2\"); } && { echo 'usage: git related <rev1> <rev2>'; exit 1; }; if [ \"$l\" = \"$r\" ]; then echo \"$1 == $2\"; elif git is-ancestor $l $r; then echo \"$1 < $2\"; elif git is-ancestor $r $l; then echo \"$2 < $1\"; else echo \"$1 unrelated to $2\"; fi }; f"
	rev-to-hash = "!f() { git argq $# 1 'rev-to-hash: <rev>'; git rev-parse --verify --end-of-options \"$1\" 2>/dev/null; }; f"
	hash-to-rev = "!f() { git argq $# 1 'hash-to-rev <hash>'; git for-each-ref --points-at=\"$1\"; }; f"
[pull]
	ff = only
[credential]
	helper = store
[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
[url "git@github.com:"]
	insteadOf = https://github.com/
